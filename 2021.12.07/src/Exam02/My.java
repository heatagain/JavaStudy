package Exam02;

public class My {

//	// 꼬깔콘 먹는 기능
//	public void 꼬깔콘Open(꼬깔콘 snack) {
//		snack.open();
//	}
//	
//	// 홈런볼 먹는 기능
//	public void 홈런볼Open(홈런볼 snack) {
//		snack.open();
//	}
//	
//	// 썬칩 먹는 기능
//	public void 썬칩Open(썬칩 snack) {
//		snack.open();
//	}
	
	public void snackOpen(Snack snack) {
		// snack 이라는 객체 하나로 서로 다른 기능을 할 수 있게끔 도와줌
		// -> 다형성
		snack.open();
		// 업캐스팅된 상태에서 일시적으로 하위클래스의 있는
		// 기능을 수행하고 싶을 때 -> 다운캐스팅
		// 하위클래스명 다운캐스팅객체명 = (하위클래스명) 업캐스팅된 객체명

		if (snack instanceof 썬칩) {
			// A instanceof B ->
			// A라는 객체가 B로부터 업캐스팅 된 객체라면 -> true 리턴
			// 아니라면 false 반환
			// snack 이라는 변수가 썬칩으로부터
			// 업캐스팅된 변수라면
			// 다운캐스팅 해주세요
			썬칩 sunChip = (썬칩) snack;
			sunChip.sorce();
		}
		
	}
	
}

// 1. 상속을 하면 부모 클래스에 있는 데이터와 기능을 자식 클래스에서 사용할 수 있다
// 2. 자식 클래스에서는 추가적으로 기능과 데이터를 만들 수 있다
// 3. 자식 클래스에서 부모의 기능을 수정할 수 있다 (오버라이딩)
// 4. 업캐스팅 -> 자식 클래스에서 확장 기능은 수행할 수 없다
//		부모 클래스에 있는 기능만 수행 가능하지만 단, 오버라이딩 된 기능은 자식 클래스에 있는 기능을 수행한다
// 5. 다운캐스팅 -> 업캐스팅 된 상태에서 일시적으로 자식에서 확장한 기능이 필요할 경우에 사용한다
